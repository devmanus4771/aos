//Q.1) Write a C Program that demonstrates redirection of standard output to a file
#include<stdlib.h> #include<stdio.h> #include<string.h>
main(int argc, char *argv[]) {
char d[50]; if(argc==2) {
bzero(d,sizeof(d));
strcat(d,"ls ");
strcat(d,"> ");
strcat(d,argv[1]); system(d);
}
else
printf("\nInvalid No. of inputs"); }

//Q.2) Write a C program to implement the following unix/linux command (use fork, pipe and exec
system call). Your program should block the signal Ctrl-C and Ctrl-\ signal during the execution.
i. ls –l | wc –l
#include <stdio.h> #include <stdlib.h>#include <unistd.h>#include <signal.h>
void sigint_handler(int signum) {
 printf("Ctrl-C is blocked during execution.\n"); }
void sigquit_handler(int signum) {
 printf("Ctrl-\\ is blocked during execution.\n");} int main() {
// Block Ctrl-C and Ctrl-\
signal(SIGINT, sigint_handler); signal(SIGQUIT, sigquit_handler);
int pipe_fd[2]; if (pipe(pipe_fd) == -1) {
perror("Pipe creation failed"); exit(EXIT_FAILURE); }
pid_t pid = fork(); if (pid < 0) {
perror("Fork failed");exit(EXIT_FAILURE); } if (pid > 0) {
close(pipe_fd[0]); // Close the read end of the pipe in the parent
dup2(pipe_fd[1], STDOUT_FILENO);
close(pipe_fd[1]); execlp("ls", "ls", "-l", NULL);
perror("Exec failed in the parent process"); exit(EXIT_FAILURE); } else {
close(pipe_fd[1]); // Close the write end of the pipe in the child
dup2(pipe_fd[0], STDIN_FILENO); close(pipe_fd[0]);
execlp("wc", "wc", "-l", NULL); perror("Exec failed in the child process");
exit(EXIT_FAILURE);} return 0; }