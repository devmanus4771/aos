//Q.1) Take multiple files as Command Line Arguments and print their file type and inode number
#include<stdio.h> #include<sys/stat.h> #include<unistd.h> #include<fcntl.h>
int main(int argc, char *argv[]) {
struct stat fileStat; if(argc!=3)
{ printf("Invalid number of arguments ");
return 1; }
int file1 = open(argv[1], O_RDONLY); if(file1 < 0)
{
fprintf(stderr, "error opening file1\n"); return 1;
}
int file2 = open(argv[2], O_RDONLY); if(file2 < 0)
{
fprintf(stderr, "error opening file2\n"); return 1;
}
if(fstat(file1,&fileStat)<0) return 1;
printf("File1 is:%s and Inode:%ld\n",argv[1],fileStat.st_ino);
if(fstat(file2,&fileStat)<0) return 1;
printf("File2 is:%s and Inode:%ld\n",argv[2],fileStat.st_ino); }

//Q.2) Implement the following unix/linux command (use fork, pipe and exec system call)
ls –l | wc –l
#include<stdio.h>
#include<stdlib.h> #include<unistd.h> #include<fcntl.h> #include<sys/wait.h> #include<errno.h>
void main(){
int filedes[2];
if (pipe(filedes) == -1) {
perror("pipe"); exit(1);
}
if(fork() == 0) {
while ((dup2(filedes[1], STDOUT_FILENO) == -1)) {} char *args[] = {"ls","-l", NULL};
int ret = execvp("ls",args); if(ret <0)
{
printf("Program can't be executed\n"); }
exit(0); }
close(filedes[1]); if(fork() == 0) {
while((dup2(filedes[0], STDIN_FILENO) == -1)){} char *args[] = {"wc","-l", NULL};
int ret = execvp("wc",args); if(ret <0)
{
printf("Program can't be executed\n"); }
exit(0); }
char output[100];read(filedes[0], output, 100); printf("%s", output); close(filedes[0]);
exit(0); }
