//Q.1) Write a C program that illustrates suspending and resuming processes using signals
#include <signal.h>
55#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>
volatile int child_suspended = 0; void suspend_handler(int signum) {
if (signum == SIGUSR1) { kill(getpid(), SIGSTOP); child_suspended = 1; }
}
void resume_handler(int signum) { if (signum == SIGUSR2) { kill(getpid(), SIGCONT);
child_suspended = 0; }
}
int main() {
pid_t child_pid;
signal(SIGUSR1, suspend_handler); signal(SIGUSR2, resume_handler);
56child_pid = fork(); if (child_pid == -1) {
perror("Fork failed"); exit(EXIT_FAILURE); }
if (child_pid == 0) { while (1) {
if (!child_suspended) { printf("Child: Running...\n"); sleep(1);
} else {
printf("Child: Suspended.\n"); pause();
}
}
} else { sleep(2);
kill(child_pid, SIGUSR1); sleep(3);
kill(child_pid, SIGUSR2); wait(NULL);
printf("Parent: Exiting.\n"); }
57return 0; }


//Q.2) Write a C program to Identify the type (Directory, character device, Block device, Regular file,
FIFO or pipe, symbolic link or socket) of given file using stat() system call.
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
void identifyFileType(const char *filename) {
 struct stat fileStat;
 if (stat(filename, &fileStat) == -1) {
 perror("Error in stat");
 return;
 }
 if (S_ISDIR(fileStat.st_mode)) {
 printf("%s is a directory.\n", filename);
 } else if (S_ISCHR(fileStat.st_mode)) {
 printf("%s is a character device.\n", filename);
 } else if (S_ISBLK(fileStat.st_mode)) {
 printf("%s is a block device.\n", filename);
 } else if (S_ISREG(fileStat.st_mode)) {
 printf("%s is a regular file.\n", filename);
 } else if (S_ISFIFO(fileStat.st_mode)) {
 printf("%s is a FIFO or pipe.\n", filename);
 } else if (S_ISLNK(fileStat.st_mode)) {
 printf("%s is a symbolic link.\n", filename);
 } else if (S_ISSOCK(fileStat.st_mode)) {
 printf("%s is a socket.\n", filename);
 } else {
 printf("%s is of unknown type.\n", filename);
 }
}
int main(int argc, char *argv[]) {
 if (argc != 2) {
 printf("Usage: %s <filename>\n", argv[0]);
 return 1;
 }
 identifyFileType(argv[1]);
 return 0; }