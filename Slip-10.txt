//Q.1) Write a program that illustrates how to execute two commands concurrently with a pipe
#include <stdio.h> #include <unistd.h> #include <sys/types.h> #include <stdlib.h> int main()
{
int pfds[2]; char buf[80]; if(pipe(pfds)==-1){
perror("pipe failed"); exit(1);
}
if(!fork())
{
close(1); dup(pfds[1]); system ("ls -l"); }
else {
printf("parent reading from pipe \n"); while(read(pfds[0],buf,80))
printf("%s \n" ,buf); }
}

//Q.2) Generate parent process to write unnamed pipe and will write into it. Also generate child process
which will read from pipe
#include <stdio.h>#include <stdlib.h> #include <unistd.h>#define BUFFER_SIZE 25
int main() {
 int pipe_fd[2]; // File descriptors for the pipe
 if (pipe(pipe_fd) == -1) {
 perror("Pipe creation failed");
 exit(EXIT_FAILURE); }
 pid_t pid = fork();
if (pid < 0) {
perror("Fork failed");
exit(EXIT_FAILURE);
} if (pid > 0) {
 // Parent process
close(pipe_fd[0]); // Close the read end of the pipe in the parent
char message[] = "Hello from the parent!";
 write(pipe_fd[1], message, sizeof(message));
close(pipe_fd[1]); // Close the write end of the pipe in the parent
 } else { // Child process
 close(pipe_fd[1]); // Close the write end of the pipe in the child
char buffer[BUFFER_SIZE];
 ssize_t bytesRead = read(pipe_fd[0], buffer, sizeof(buffer));
if (bytesRead > 0) {
 printf("Child received: %s\n", buffer);
 } else { perror("Read failed in the child process");
 } close(pipe_fd[0]); // Close the read end of the pipe in the child
 } return 0;}
