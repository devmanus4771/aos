//Q.1) Display all the files from current directory whose size is greater that n Bytes Where n is accept
from user
#include <stdio.h>#include <dirent.h>#include<string.h>#include<unistd.h>#include<time.h>
#include<sys/stat.h>#include<sys/types.h>#include<stdlib.h>
void main(int argc, char **argv) {
struct dirent *de;
struct stat fstat;
struct tm *timeinfo; if(argc != 2){
printf("no size value passed\n"); exit(1);
}
int size = atoi(argv[1]); if(size <0){
printf("invalid size value : size should be non negative\n"); exit(1);
}
DIR *directory = opendir("."); char **filenames;
if (directory == NULL) {
printf("Could not open current directory" ); return;
}while ((de = readdir(directory)) != NULL)
if(strcmp(de->d_name,".") != 0 && strcmp(de->d_name,"..")) {
stat(de->d_name,&fstat); if(fstat.st_size > size) {
printf("%s\t %ld\n",de->d_name,fstat.st_size ); }
}
closedir(directory); }

//Q.2) Write a C program which creates a child process to run linux/ unix command or any user defined
program. The parent process set the signal handler for death of child signal and Alarm signal. If
a child process does not complete its execution in 5 second then parent process kills child process
#include <stdio.h> #include <signal.h> #include <stdlib.h> #include <unistd.h> #include <sys/types.h>
// function declaration of sighup, sigint and sigquit functions
void sighup();
void sigint();
void sigquit();
// main function or driver code void main()
{
int pid;
// pid variable, which will be used later to identify the process, whether it is child process or parent
process
// to get the child process if ((pid = fork()) < 0)
{perror("fork"); exit(1);
}
if (pid == 0)
{ /* child process, since pid equals to zero for child process */
signal(SIGHUP, sighup);
signal(SIGINT, sigint);
signal(SIGQUIT, sigquit);
for (;;); /* infinite loop i.e. loop for ever */ }
else /* parent process*/
{ // pid hold the process id of child process printf("\nPARENT: sending SIGHUP\n\n"); kill(pid,
SIGHUP);
sleep(3); // pause for 3 seconds printf("\nPARENT: sending SIGINT\n\n"); kill(pid, SIGINT);
sleep(3); // pause for 3 seconds
printf("\nPARENT: Waiting for 5 Second then kill child\n\n"); printf("\nPARENT: sending
SIGQUIT\n\n");
kill(pid, SIGQUIT);
sleep(5); // pause for 5 seconds }
}
// function definition of sighup() void sighup()
{
signal(SIGHUP, sighup); /* reset signal */ printf("CHILD: I have received a SIGHUP\n");}
// function definition of sigint() void sigint()
{
signal(SIGINT, sigint); /* reset signal */ printf("CHILD: I have received a SIGINT\n");
}
// function definition of sigquit() void sigquit()
{
printf("My Papa has Killed me!!!\n"); exit(0);
}